// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Horse struct {
	ID            string       `json:"id"`
	Name          string       `json:"name"`
	AltName       *string      `json:"altName,omitempty"`
	Gender        *HorseGender `json:"gender,omitempty"`
	SireID        *string      `json:"sireID,omitempty"`
	DamID         *string      `json:"damID,omitempty"`
	Sire          *Horse       `json:"sire,omitempty"`
	Dam           *Horse       `json:"dam,omitempty"`
	Weight        *float64     `json:"weight,omitempty"`
	JraRegistered *bool        `json:"jraRegistered,omitempty"`
}

type HorseGender string

const (
	HorseGenderHorse   HorseGender = "Horse"
	HorseGenderMare    HorseGender = "Mare"
	HorseGenderGelding HorseGender = "Gelding"
)

var AllHorseGender = []HorseGender{
	HorseGenderHorse,
	HorseGenderMare,
	HorseGenderGelding,
}

func (e HorseGender) IsValid() bool {
	switch e {
	case HorseGenderHorse, HorseGenderMare, HorseGenderGelding:
		return true
	}
	return false
}

func (e HorseGender) String() string {
	return string(e)
}

func (e *HorseGender) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HorseGender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HorseGender", str)
	}
	return nil
}

func (e HorseGender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
